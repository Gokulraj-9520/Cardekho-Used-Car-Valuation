# -*- coding: utf-8 -*-
"""cardekho.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JTajDRa0z3GrvX0h6KshvZV7LWf6j0nt
"""

pip install mlflow pycaret

# Commented out IPython magic to ensure Python compatibility.
from mlflow import *
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
from pycaret.regression import *
import warnings
from pprint import pprint
import ast
warnings.filterwarnings("ignore")
# %matplotlib inline
pd.set_option('display.max_columns', None)

df1=pd.read_excel("/content/sample_data/bangalore_cars.xlsx")
df1['Location']='Bangalore'
df1.head(5)

df2=pd.read_excel("/content/sample_data/chennai_cars.xlsx")
df2['Location']='Chennai'
df2.head()

df3=pd.read_excel("/content/sample_data/delhi_cars.xlsx")
df3['Location']='Delhi'
df3.head()

df4=pd.read_excel("/content/sample_data/hyderabad_cars.xlsx")
df4['Location']='Hyderabad'
df4.head()

df5=pd.read_excel("/content/sample_data/jaipur_cars.xlsx")
df5['Location']='Jaipur'
df5.head()

df6=pd.read_excel("/content/sample_data/kolkata_cars.xlsx")
df6['Location']='Kolkata'
df6.head()

df=pd.concat([df1,df2,df3,df4,df5,df6],axis=0)
df.head()

df.shape

dff=df.copy()

df_car=pd.DataFrame()
df_car['Location']=df['Location']
df_car.head()

df['new_car_detail'].head()

def extract_key_value_pairs(dictionary):
    return list(dictionary.items())

df['new_car_detail'] = df['new_car_detail'].apply(ast.literal_eval)
df['new_car_overview'] = df['new_car_overview'].apply(ast.literal_eval)
df['new_car_feature'] = df['new_car_feature'].apply(ast.literal_eval)
df['new_car_specs'] = df['new_car_specs'].apply(ast.literal_eval)

df_new_car_details = df['new_car_detail'].apply(extract_key_value_pairs)
df_new_car_overview=df['new_car_overview'].apply(extract_key_value_pairs)
df_new_car_feature=df['new_car_feature'].apply(extract_key_value_pairs)
df_new_car_specs=df['new_car_specs'].apply(extract_key_value_pairs)

df_new_car_details

#Car Details
data_dicts = []
for list_of_tuples in df_new_car_details:
    data_dict = dict(list_of_tuples)
    data_dicts.append(data_dict)
df_new_car_detail = pd.DataFrame(data_dicts)
df_new_car_detail.head()

for index in df_new_car_detail.columns:
  df_car[index]=df_new_car_detail[index]

df_car.head()

#data_dicts
df_car.shape

#Car Overview
overview_data_dicts = []
for list_of_tuples in df_new_car_overview:
    overview_data_dict = dict(list_of_tuples)
    overview_data_dicts.append(overview_data_dict)
df_new_car_overviews = pd.DataFrame(overview_data_dicts)
df_new_car_overviews.head()

df_new_car_overviews['heading'].value_counts()

#df_new_car_overviews.iloc[0,:]

df_overview_top=pd.DataFrame(df_new_car_overviews['top'])
df_overview_top.head()

length=df_overview_top.shape
length[0]

df_overview_top['top'][0]
overview_top=[]
for i in range(length[0]):#length=df_top.shape
  overview_tops={}
  for j in range(len(df_overview_top['top'][i])):
    #print(df_overview_top['top'][i][j])
    overview_tops[df_overview_top['top'][i][j]['key']]=df_overview_top['top'][i][j]['value']
  overview_top.append(overview_tops)

#top

df_overview_tops=pd.DataFrame(overview_top)
df_overview_tops.head()

df_overview_tops.shape

#df_new_car_feature
for index in df_overview_tops.columns:
  df_car[index]=df_overview_tops[index]

df_car.head()

df_car.shape

feature_data_dicts = []
for list_of_tuples in df_new_car_feature:
    feature_data_dict = dict(list_of_tuples)
    feature_data_dicts.append(feature_data_dict)
df_new_car_features = pd.DataFrame(feature_data_dicts)
df_new_car_features.head()

df_feature_top=df_new_car_features['top']
df_feature_data=df_new_car_features['data']

#df_feature_top[0]

#df_feature_top

features=[]
for i in range(df_feature_top.shape[0]):
  feature=[]
  for j in range(len(df_feature_top[i])):
    #print(df_feature_top[i][j])
    #print()
    feature_value=df_feature_top[i][j]['value']
    feature.append(feature_value)
  features.append(feature)

features[0]

#value

dff_new_features=pd.Series(features)
df_car['Features']=dff_new_features
df_car.head()

df_car.shape

df_feature_data[0]

#df_feature_data
feature_data=[]

for i in range(df_feature_data.shape[0]):
  feature_dictionary_value=[]
  feature_dictionary_dict={}
  #pprint(len(df_feature_data[i]))
  for j in range(len(df_feature_data[i])):
    #pprint(df_feature_data[i][j])
    #print(len(df_feature_data[i][j]))
    for k in range(len(df_feature_data[i][j])):
      #print(df_feature_data[i][j]['subHeading'])
      if df_feature_data[i][j]['list']:
        feature_data_values=[]
        #print(len(df_feature_data[i][j]['list']))
        for x in range(len(df_feature_data[i][j]['list'])):
          #print(df_feature_data[i][j]['list'][x]['value'])
          feature_data_values.append(df_feature_data[i][j]['list'][x]['value'])
        #print(df_feature_data[i][j]['list'])
        #print(values)
        feature_dictionary_value.append(feature_data_values)

        #print()
      feature_dictionary_dict[df_feature_data[i][j]['heading']]=feature_data_values
      break
        #for keys,data_values in df_feature_data[i][j]['list']:


    #for key,key_values in value.items():
    #  print(key,key_values)
    #  print()
  feature_data.append(feature_dictionary_dict)

#pprint(data)

#feature_data[1]

df_feature=pd.DataFrame(feature_data)
df_feature.head()

df_feature.shape

for index in df_feature.columns:
  df_car[index]=df_feature[index]

df_car.head()

df_new_car_specs.head()

#Car Overview
specs_dicts = []
for list_of_tuples in df_new_car_specs:
    specs_dict = dict(list_of_tuples)
    specs_dicts.append(specs_dict)
df_new_car_specific = pd.DataFrame(specs_dicts)
df_new_car_specific.head()

df_specs_top=pd.DataFrame(df_new_car_specific['top'])
df_specs_top.head()

#df_top['top'][0]
specs_top=[]
for i in range(df_specs_top.shape[0]):#length=df_top.shape
  specs_tops={}
  for j in range(len(df_specs_top['top'][i])):
    #print(df_top['top'][i][j])
    specs_tops[df_specs_top['top'][i][j]['key']]=df_specs_top['top'][i][j]['value']
  specs_top.append(specs_tops)
df_specs_tops=pd.DataFrame(specs_top)
df_specs_tops.head()

df_specs_data=pd.DataFrame(df_new_car_specific['data'])
df_specs_data.head()

df_specific_data=df_specs_data['data']
#df_specs_data[0]

#df_feature_data
specific=pd.DataFrame()
specs_data=[]
specs_dictionary_value=[]
for i in range(df_specific_data.shape[0]):

  specs_dictionary_dict={}
  #pprint(len(df_specs_data[i]))
  for j in range(len(df_specific_data[i])):
    #pprint(df_specific_data[i][j])
    #print(len(df_feature_data[i][j]))
    for k in range(len(df_specific_data[i][j])):
      #print(df_specific_data[i][j]['subHeading'])
      if df_specific_data[i][j]['list']:
        specs_values=[]
        for x in range(len(df_specific_data[i][j]['list'])):
          #print(df_specific_data[i][j]['list'][x])
          #specific[df_specific_data[i][j]['list'][x]['key']]=df_specific_data[i][j]['list'][x]['value']
          specs_dictionary_dict[df_specific_data[i][j]['list'][x]['key']]=df_specific_data[i][j]['list'][x]['value']
      break
  specs_dictionary_value.append(specs_dictionary_dict)
#pprint(specs_dictionary_value)
#print(specific)

#pprint(specs_dictionary_value)

df_car_specification_data=pd.DataFrame(specs_dictionary_value)
df_car_specification_data.head()

df_car_specification_data.shape

for index in df_car_specification_data.columns:
  df_car[index]=df_car_specification_data[index]

df_car.head()

df_car.shape

df_car['price']

dff_car=df_car.copy()

dff_car.head()

#df_car=dff_car.copy()

def convert_to_numeric(value):
  if '.' in value and 'Lakh' in value:
    value=value.replace(' Lakh','000')
    value=value.replace('.','')
    #print(value)
  elif 'Lakh' in value:
    value=value.replace(' Lakh','00000')
    #print(value)
  elif '.' in value and 'Crore' in value:
    value=value.replace(' Crore','00000')
    value=value.replace('.','')
  elif 'Crore' in value:
    value=value.replace(' Crore','0000000')
  elif ',' in value:
    value=value.replace(',','')
  elif '.' in value:
    value=value.replace('.','')
  return value

df_car['price']=df_car['price'].astype(str)

value_list=[]
for value in df_car['price']:
  if '₹' in value:
    value=value.replace('₹ ','')
  #print(value)
  #print(type(value))
  values=convert_to_numeric(value)

  value_list.append(values)
#print(values)

len(value_list)

value_list[:50]

df_car['price']=value_list

df_car.head()

kms=[]
for km in df_car['Kms Driven']:
  value=convert_to_numeric(km)
  #print(value)
  kms.append(value[:-4])

df_car['Kms Driven']=kms
df_car.head()

df_car.head()

priceActual=[]
for value in df_car['priceActual']:
  if value=='':
    priceActual.append('0')
  else:
    if '₹ ' in value:
      value=value.replace('₹ ','')
    priceActual.append(convert_to_numeric(value))
    #print(value)

df_car['priceActual']=priceActual

df_car.head()

df_car.drop(["owner","priceSaving","priceFixedText","trendingText","km","Ownership","ft","transmission","Displacement","Seats"],inplace=True, axis=1)

#df_car.drop(['priceSaving'],axis=1, inplace=True)

df_car.head()

RegistrationYear=[]
for value in df_car['Registration Year']:
  try:
    RegistrationYear.append(int(value[-4:]))
  except:
    RegistrationYear.append(value)

df_car['Registration Year']=RegistrationYear
df_car.head()

df_car['it']=pd.to_numeric(df_car['it'], errors='coerce')
df_car['ownerNo']=pd.to_numeric(df_car['ownerNo'],errors='coerce')
df_car['modelYear']=pd.to_numeric(df_car['modelYear'],errors='coerce')
df_car['centralVariantId']=pd.to_numeric(df_car['centralVariantId'],errors='coerce')
df_car['price']=pd.to_numeric(df_car['price'],errors='coerce')
df_car['priceActual']=pd.to_numeric(df_car['priceActual'],errors='coerce')
df_car['Registration Year']=pd.to_numeric(df_car['Registration Year'],errors='coerce')
df_car['Kms Driven']=pd.to_numeric(df_car['Kms Driven'],errors='coerce')
df_car['Year of Manufacture']=pd.to_numeric(df_car['Year of Manufacture'],errors='coerce')
df_car['No of Cylinder']=pd.to_numeric(df_car['No of Cylinder'],errors='coerce')
df_car['Values per Cylinder']=pd.to_numeric(df_car['Values per Cylinder'],errors='coerce')
df_car['Seating Capacity']=pd.to_numeric(df_car['Seating Capacity'],errors='coerce')
df_car['No Door Numbers']=pd.to_numeric(df_car['No Door Numbers'],errors='coerce')
df_car['Alloy Wheel Size']=pd.to_numeric(df_car['Alloy Wheel Size'],errors='coerce')

df_car.head()

df_car['Features'].head()

df_car['Features'] = df_car['Features'].apply(lambda x: ', '.join(x))
df_car['Features'].head()

comfort=[]
interior=[]
exterior=[]
safety=[]
entertainment=[]
for value in df_car['Comfort & Convenience']:
  if type(value)==float:
    comfort.append(['n','a','n'])
  else:
    comfort.append(value)
for value in df_car['Interior']:
  if type(value)==float:
    interior.append(['n','a','n'])
  else:
    interior.append(value)
for value in df_car['Exterior']:
  if type(value)==float:
    exterior.append(['n','a','n'])
  else:
    exterior.append(value)
for value in df_car['Safety']:
  if type(value)==float:
    safety.append(['n','a','n'])
  else:
    safety.append(value)

for value in df_car['Entertainment & Communication']:
  if type(value)==float:
    entertainment.append(['n','a','n'])
  else:
    entertainment.append(value)
  #print(type(value))

df_car['Comfort & Convenience']=comfort
df_car['Interior']=interior
df_car['Exterior']=exterior
df_car['Safety']=safety
df_car['Entertainment & Communication']=entertainment



#df_car['Comfort & Convenience']=df_car['Comfort & Convenience'].apply(lambda x: ', '.join(x))

df_car['Comfort & Convenience']=df_car['Comfort & Convenience'].apply(lambda x: ', '.join(x))
df_car['Interior']=df_car['Interior'].apply(lambda x:', '.join(x))
df_car['Exterior']=df_car['Exterior'].apply(lambda x:', '.join(x))
df_car['Safety']=df_car['Safety'].apply(lambda x:', '.join(x))
df_car['Entertainment & Communication']=df_car['Entertainment & Communication'].apply(lambda x:', '.join(x))

#df_car['Entertainment & Communication'].head()#

df_car.head()

df_car['Insurance Validity']=df_car['Insurance Validity'].replace('Third Party insurance','Third Party')
df_car['Insurance Validity'].value_counts()

df_car['Value Configuration']=df_car['Value Configuration'].replace("DOHC ","DOHC")
df_car['Value Configuration'].value_counts()

df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("MPFi","MPFI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("MPFI ","MPFI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("CRDi","CRDI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("Direct Injection ","Direct Injection")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("PGM - Fi","PGM-FI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("PGM-Fi","PGM-FI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("PGM-FI (Programmed Fuel Injection)","PGM-FI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("GDi","GDI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("Common rail direct injection","CRDI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("Common Rail Direct Injection (dCi)","CRDI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("EFI (Electronic Fuel Injection)","EFI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("EFI(Electronic Fuel Injection)","EFI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("Direct Injection Common Rail","CRDI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("Multi point Fuel Injection","MPFI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("Multi point Injection","MPFI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("Electronic Fuel Injection","EFI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("Gasoline Direct Injection","GDI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("Common-Rail type","Common Rail")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("Common Rail Direct Injection","CRDI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("Multi Point Fuel Injection","MPFI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("Multi-point injection","MPI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("MPi","MPI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("Multipoint Injection","MPI")
df_car['Fuel Suppy System']=df_car['Fuel Suppy System'].replace("common rail system","Common Rail")
df_car['Fuel Suppy System'].value_counts()

df_car['Turbo Charger']=df_car['Turbo Charger'].replace("NO","No")
df_car['Turbo Charger']=df_car['Turbo Charger'].replace("no","No")
df_car['Turbo Charger']=df_car['Turbo Charger'].replace("YES","Yes")
df_car['Turbo Charger'].value_counts()

df_car['Super Charger']=df_car['Super Charger'].replace("yes","Yes")
df_car['Super Charger'].value_counts()

length=[]
for value in df_car['Length']:
  try:
      value=value.replace(" ","")
      value=value.replace(",","")
      if 'mm' not in value:
        value=value+'mm'
      length.append(value)

  except:
    length.append(value)

df_car['Length']=length
df_car['Length'].value_counts()

width=[]
for value in df_car['Width']:
  try:
      value=value.replace(" ","")
      value=value.replace(",","")
      if 'mm' not in value:
        value=value+'mm'
      width.append(value)

  except:
    width.append(value)
df_car['Width']=width
df_car['Width'].value_counts()

height=[]
for value in df_car['Height']:
  try:
      value=value.replace(" ","")
      value=value.replace(",","")
      if 'mm' not in value:
        value=value+'mm'
      height.append(value)

  except:
    height.append(value)
df_car['Height']=height
df_car['Height'].value_counts()

wheelbase=[]
for value in df_car['Wheel Base']:
  try:
      value=value.replace(" ","")
      value=value.replace(",","")
      if 'mm' not in value:
        value=value+'mm'
      wheelbase.append(value)

  except:
    wheelbase.append(value)
df_car['Wheel Base']=wheelbase
df_car['Wheel Base'].value_counts()

frontTread=[]
for value in df_car['Front Tread']:
  try:
      value=value.replace(" ","")
      value=value.replace(",","")
      if 'mm' not in value:
        value=value+'mm'
      frontTread.append(value)

  except:
    frontTread.append(value)
df_car['Front Tread']=frontTread
df_car['Front Tread'].value_counts()

rearTread=[]
for value in df_car['Rear Tread']:
  try:
      value=value.replace(" ","")
      value=value.replace(",","")
      if 'mm' not in value:
        value=value+'mm'
      rearTread.append(value)

  except:
    rearTread.append(value)
df_car['Rear Tread']=rearTread
df_car['Rear Tread'].value_counts()

kerb_weight=[]
for value in df_car['Kerb Weight']:
  try:
    if '-' in value:
      value=value.split('-')[0]
    if 'kg' not in value and 'Kg' not in value:
      value=value+'Kg'
    if 'kg' in value:
      value=value.replace('kg','Kg')
    if ' ' in value:
      value=value.replace(' ',"")
    kerb_weight.append(value)

  except:
    kerb_weight.append(value)
#kerb_weight
df_car['Kerb Weight']=kerb_weight
df_car['Kerb Weight'].value_counts()

gross_weight=[]
for value in df_car['Gross Weight']:
  try:
    if '-' in value:
      value=value.split('-')[0]
    if 'kg' not in value and 'Kg' not in value:
      value=value+'Kg'
    if 'kg' in value:
      value=value.replace('kg','Kg')
    if 'KG' in value:
      value=value.replace('KG','Kg')
    if ' ' in value:
      value=value.replace(' ',"")
    gross_weight.append(value)

  except:
    gross_weight.append(value)
#kerb_weight
#gross_weight
df_car['Gross Weight']=gross_weight
df_car['Gross Weight'].value_counts()

gear_box=[]
for value in df_car['Gear Box']:
  try:
    if '-' in value:
     value=value.replace('-',' ')
    if 'speed' in value:
      value=value.replace('speed','Speed')
    if 'iMT' in value:
      value=value.replace('iMT','IMT')
    if 'Five' in value:
      value=value.replace('Five',"5")
    if "Transmission" in value:
      value=value.replace("Transmission","")
    if '`' in value:
      value=value.replace('`','')
    if 'Speed' not in value and value.isalnum():
      value=value+" Speed"
    if " " not in value:
      value=value[0]+' '+value[1:]
    gear_box.append(value.strip())
  except:
    gear_box.append(value)
#gear_box
df_car['Gear Box']=gear_box
df_car['Gear Box'].value_counts()

for column in df_car.columns:
    if df_car[column].dtype == 'object':
        print(df_car[column].value_counts())
        print('--------')



print(df_car.info())

df_car.describe()

plt.figure(figsize=(10, 6))
sns.histplot(df_car['price'], bins=30, kde=True)
plt.title('Distribution of Price')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 8))
sns.scatterplot(x='modelYear', y='price', data=df_car)
plt.title('Price vs Model Year')
plt.xlabel('Model Year')
plt.ylabel('Price')
plt.show()

correlation_matrix = df_car.corr()

# Plotting the correlation matrix heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.1)
plt.title('Correlation Matrix')
plt.show()

duplicates = df_car.duplicated(subset='Insurance Validity', keep=False)
duplicates

df_car['Insurance Validity'].value_counts()

sns.countplot(data=df_car, x='Insurance Validity')
plt.show()

for column in df_car.columns:
  try:
    if df_car[column].dtype == 'object':
        print(column)
        sns.countplot(data=df_car, x=column)

        plt.show()
  except:
      pass

for column in df_car.columns:
  try:
    if df_car[column].dtype != 'object':
        sns.boxplot(data=df_car, x=column)
        plt.show()
  except:
    pass

df_car.to_csv('/content/sample_data/cars.csv',index=False)

model_view=setup(data=df_car,target='price',index=False)

compare_models()

dt=create_model('dt')

tuned_dt_model=tune_model(dt)

evaluate_model(tuned_dt_model)

predictions=predict_model(tuned_dt_model,data=df_car)

final_dt_model=finalize_model(tuned_dt_model)

save_model(final_dt_model,'dt')

