# -*- coding: utf-8 -*-
"""cardekho.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JTajDRa0z3GrvX0h6KshvZV7LWf6j0nt
"""
#pip install mlflow pycaret

from mlflow import *
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
from pycaret.regression import *
import warnings
from pprint import pprint
import ast
warnings.filterwarnings("ignore")
# %matplotlib inline
pd.set_option('display.max_columns', None)

df1=pd.read_excel("./Dataset/bangalore_cars.xlsx")
df1['Location']='Bangalore'
#print(df1.head(5))

df2=pd.read_excel("./Dataset/chennai_cars.xlsx")
df2['Location']='Chennai'
#print(df2.head())

df3=pd.read_excel("./Dataset/delhi_cars.xlsx")
df3['Location']='Delhi'
#print(df3.head())

df4=pd.read_excel("./Dataset/hyderabad_cars.xlsx")
df4['Location']='Hyderabad'
#print(df4.head())

df5=pd.read_excel("./Dataset/jaipur_cars.xlsx")
df5['Location']='Jaipur'
#print(df5.head())

df6=pd.read_excel("./Dataset/kolkata_cars.xlsx")
df6['Location']='Kolkata'
#print(df6.head())

df=pd.concat([df1,df2,df3,df4,df5,df6],axis=0)
#print(df.head())

#print(df.shape)

#print(dff=df.copy())

df_car=pd.DataFrame()
df_car['Location']=df['Location']
#print(df_car.head())

#print(df['new_car_detail'].head())

def extract_key_value_pairs(dictionary):
    return list(dictionary.items())

df['new_car_detail'] = df['new_car_detail'].apply(ast.literal_eval)
df['new_car_overview'] = df['new_car_overview'].apply(ast.literal_eval)
df['new_car_feature'] = df['new_car_feature'].apply(ast.literal_eval)
df['new_car_specs'] = df['new_car_specs'].apply(ast.literal_eval)

df_new_car_details = df['new_car_detail'].apply(extract_key_value_pairs)
df_new_car_overview=df['new_car_overview'].apply(extract_key_value_pairs)
df_new_car_feature=df['new_car_feature'].apply(extract_key_value_pairs)
df_new_car_specs=df['new_car_specs'].apply(extract_key_value_pairs)

#print(df_new_car_details)

#Car Details
data_dicts = []
for list_of_tuples in df_new_car_details:
    data_dict = dict(list_of_tuples)
    data_dicts.append(data_dict)
df_new_car_detail = pd.DataFrame(data_dicts)
#print(df_new_car_detail.head())

for index in df_new_car_detail.columns:
  df_car[index]=df_new_car_detail[index]

#print(df_car.head())

#data_dicts
#print(df_car.shape)

#Car Overview
overview_data_dicts = []
for list_of_tuples in df_new_car_overview:
    overview_data_dict = dict(list_of_tuples)
    overview_data_dicts.append(overview_data_dict)
df_new_car_overviews = pd.DataFrame(overview_data_dicts)
#print(df_new_car_overviews.head())

#rint(df_new_car_overviews['heading'].value_counts())

#df_new_car_overviews.iloc[0,:]

df_overview_top=pd.DataFrame(df_new_car_overviews['top'])
#print(df_overview_top.head())

length=df_overview_top.shape
#print(length[0])

#print(df_overview_top['top'][0])
overview_top=[]
for i in range(length[0]):#length=df_top.shape
  overview_tops={}
  for j in range(len(df_overview_top['top'][i])):
    #print(df_overview_top['top'][i][j])
    overview_tops[df_overview_top['top'][i][j]['key']]=df_overview_top['top'][i][j]['value']
  overview_top.append(overview_tops)

#top

df_overview_tops=pd.DataFrame(overview_top)
#print(df_overview_tops.head())

#print(df_overview_tops.shape)

#df_new_car_feature
for index in df_overview_tops.columns:
  df_car[index]=df_overview_tops[index]

#print(df_car.head())

#print(df_car.shape)

feature_data_dicts = []
for list_of_tuples in df_new_car_feature:
    feature_data_dict = dict(list_of_tuples)
    feature_data_dicts.append(feature_data_dict)
df_new_car_features = pd.DataFrame(feature_data_dicts)
#print(df_new_car_features.head())

df_feature_top=df_new_car_features['top']
df_feature_data=df_new_car_features['data']

#df_feature_top[0]

#df_feature_top

features=[]
for i in range(df_feature_top.shape[0]):
  feature=[]
  for j in range(len(df_feature_top[i])):
    #print(df_feature_top[i][j])
    #print()
    feature_value=df_feature_top[i][j]['value']
    feature.append(feature_value)
  features.append(feature)

#print(features[0])

#value

dff_new_features=pd.Series(features)
df_car['Features']=dff_new_features
#print(df_car.head())

#print(df_car.shape)

#print(df_feature_data[0])

#df_feature_data
feature_data=[]

for i in range(df_feature_data.shape[0]):
  feature_dictionary_value=[]
  feature_dictionary_dict={}
  #pprint(len(df_feature_data[i]))
  for j in range(len(df_feature_data[i])):
    #pprint(df_feature_data[i][j])
    #print(len(df_feature_data[i][j]))
    for k in range(len(df_feature_data[i][j])):
      #print(df_feature_data[i][j]['subHeading'])
      if df_feature_data[i][j]['list']:
        feature_data_values=[]
        #print(len(df_feature_data[i][j]['list']))
        for x in range(len(df_feature_data[i][j]['list'])):
          #print(df_feature_data[i][j]['list'][x]['value'])
          feature_data_values.append(df_feature_data[i][j]['list'][x]['value'])
        #print(df_feature_data[i][j]['list'])
        #print(values)
        feature_dictionary_value.append(feature_data_values)

        #print()
      feature_dictionary_dict[df_feature_data[i][j]['heading']]=feature_data_values
      break
        #for keys,data_values in df_feature_data[i][j]['list']:


    #for key,key_values in value.items():
    #  print(key,key_values)
    #  print()
  feature_data.append(feature_dictionary_dict)

#pprint(data)

#feature_data[1]

df_feature=pd.DataFrame(feature_data)
#print(df_feature.head())

#print(df_feature.shape)

for index in df_feature.columns:
  df_car[index]=df_feature[index]

#print(df_car.head())

#print(df_new_car_specs.head())

#Car Overview
specs_dicts = []
for list_of_tuples in df_new_car_specs:
    specs_dict = dict(list_of_tuples)
    specs_dicts.append(specs_dict)
df_new_car_specific = pd.DataFrame(specs_dicts)
#print(df_new_car_specific.head())

df_specs_top=pd.DataFrame(df_new_car_specific['top'])
#print(df_specs_top.head())

#df_top['top'][0]
specs_top=[]
for i in range(df_specs_top.shape[0]):#length=df_top.shape
  specs_tops={}
  for j in range(len(df_specs_top['top'][i])):
    #print(df_top['top'][i][j])
    specs_tops[df_specs_top['top'][i][j]['key']]=df_specs_top['top'][i][j]['value']
  specs_top.append(specs_tops)
df_specs_tops=pd.DataFrame(specs_top)
#print(df_specs_tops.head())

df_specs_data=pd.DataFrame(df_new_car_specific['data'])
#print(df_specs_data.head())

df_specific_data=df_specs_data['data']
#df_specs_data[0]

#df_feature_data
specific=pd.DataFrame()
specs_data=[]
specs_dictionary_value=[]
for i in range(df_specific_data.shape[0]):

  specs_dictionary_dict={}
  #pprint(len(df_specs_data[i]))
  for j in range(len(df_specific_data[i])):
    #pprint(df_specific_data[i][j])
    #print(len(df_feature_data[i][j]))
    for k in range(len(df_specific_data[i][j])):
      #print(df_specific_data[i][j]['subHeading'])
      if df_specific_data[i][j]['list']:
        specs_values=[]
        for x in range(len(df_specific_data[i][j]['list'])):
          #print(df_specific_data[i][j]['list'][x])
          #specific[df_specific_data[i][j]['list'][x]['key']]=df_specific_data[i][j]['list'][x]['value']
          specs_dictionary_dict[df_specific_data[i][j]['list'][x]['key']]=df_specific_data[i][j]['list'][x]['value']
      break
  specs_dictionary_value.append(specs_dictionary_dict)
#pprint(specs_dictionary_value)
#print(specific)

#pprint(specs_dictionary_value)

df_car_specification_data=pd.DataFrame(specs_dictionary_value)
#print(df_car_specification_data.head())

#print(df_car_specification_data.shape)

for index in df_car_specification_data.columns:
  df_car[index]=df_car_specification_data[index]

#print(df_car.head())

#print(df_car.shape)

#print(df_car['price'])

df_car.to_csv('/content/sample_data/cars.csv',index=False)

dff_car=df_car.copy()

#print(dff_car.head())

#df_car=dff_car.copy()

def convert_to_numeric(value):
  if '.' in value and 'Lakh' in value:
    value=value.replace(' Lakh','000')
    value=value.replace('.','')
    #print(value)
  elif 'Lakh' in value:
    value=value.replace(' Lakh','00000')
    #print(value)
  elif '.' in value and 'Crore' in value:
    value=value.replace(' Crore','00000')
    value=value.replace('.','')
  elif 'Crore' in value:
    value=value.replace(' Crore','0000000')
  elif ',' in value:
    value=value.replace(',','')
  elif '.' in value:
    value=value.replace('.','')
  return value

df_car['price']=df_car['price'].astype(str)

value_list=[]
for value in df_car['price']:
  if '₹' in value:
    value=value.replace('₹ ','')
  #print(value)
  #print(type(value))
  values=convert_to_numeric(value)

  value_list.append(values)
#print(values)

#print(len(value_list))

#print(value_list[:50])

df_car['price']=value_list

#print(df_car.head())

kms=[]
for km in df_car['Kms Driven']:
  value=convert_to_numeric(km)
  #print(value)
  kms.append(value[:-4])

df_car['Kms Driven']=kms
#print(df_car.head())

#print(df_car.head())

priceActual=[]
for value in df_car['priceActual']:
  if value=='':
    priceActual.append('0')
  else:
    if '₹ ' in value:
      value=value.replace('₹ ','')
    priceActual.append(convert_to_numeric(value))
    #print(value)

df_car['priceActual']=priceActual

#print(df_car.head())

df_car.drop(["owner","priceSaving","priceFixedText","trendingText","km","Ownership","ft","transmission","Displacement","Seats"],inplace=True, axis=1)

#df_car.drop(['priceSaving'],axis=1, inplace=True)

#print(df_car.head())

RegistrationYear=[]
for value in df_car['Registration Year']:
  try:
    RegistrationYear.append(int(value[-4:]))
  except:
    RegistrationYear.append(value)

df_car['Registration Year']=RegistrationYear
#print(df_car.head())

df_car['it']=pd.to_numeric(df_car['it'], errors='coerce')
df_car['ownerNo']=pd.to_numeric(df_car['ownerNo'],errors='coerce')
df_car['modelYear']=pd.to_numeric(df_car['ownerNo'],errors='coerce')
df_car['centralVariantId']=pd.to_numeric(df_car['centralVariantId'],errors='coerce')
df_car['price']=pd.to_numeric(df_car['price'],errors='coerce')
df_car['priceActual']=pd.to_numeric(df_car['priceActual'],errors='coerce')
df_car['Registration Year']=pd.to_numeric(df_car['Registration Year'],errors='coerce')
df_car['Kms Driven']=pd.to_numeric(df_car['Kms Driven'],errors='coerce')
df_car['Year of Manufacture']=pd.to_numeric(df_car['Year of Manufacture'],errors='coerce')
df_car['No of Cylinder']=pd.to_numeric(df_car['No of Cylinder'],errors='coerce')
df_car['Values per Cylinder']=pd.to_numeric(df_car['Values per Cylinder'],errors='coerce')
df_car['Seating Capacity']=pd.to_numeric(df_car['Seating Capacity'],errors='coerce')
df_car['No Door Numbers']=pd.to_numeric(df_car['No Door Numbers'],errors='coerce')
df_car['Alloy Wheel Size']=pd.to_numeric(df_car['Alloy Wheel Size'],errors='coerce')

#print(df_car.head())

#print(df_car['Features'].head())

df_car['Features'] = df_car['Features'].apply(lambda x: ', '.join(x))
#print(df_car['Features'].head())

comfort=[]
interior=[]
exterior=[]
safety=[]
entertainment=[]
for value in df_car['Comfort & Convenience']:
  if type(value)==float:
    comfort.append(['n','a','n'])
  else:
    comfort.append(value)
for value in df_car['Interior']:
  if type(value)==float:
    interior.append(['n','a','n'])
  else:
    interior.append(value)
for value in df_car['Exterior']:
  if type(value)==float:
    exterior.append(['n','a','n'])
  else:
    exterior.append(value)
for value in df_car['Safety']:
  if type(value)==float:
    safety.append(['n','a','n'])
  else:
    safety.append(value)

for value in df_car['Entertainment & Communication']:
  if type(value)==float:
    entertainment.append(['n','a','n'])
  else:
    entertainment.append(value)
  #print(type(value))

df_car['Comfort & Convenience']=comfort
df_car['Interior']=interior
df_car['Exterior']=exterior
df_car['Safety']=safety
df_car['Entertainment & Communication']=entertainment



#df_car['Comfort & Convenience']=df_car['Comfort & Convenience'].apply(lambda x: ', '.join(x))

df_car['Comfort & Convenience']=df_car['Comfort & Convenience'].apply(lambda x: ', '.join(x))
df_car['Interior']=df_car['Interior'].apply(lambda x:', '.join(x))
df_car['Exterior']=df_car['Exterior'].apply(lambda x:', '.join(x))
df_car['Safety']=df_car['Safety'].apply(lambda x:', '.join(x))
df_car['Entertainment & Communication']=df_car['Entertainment & Communication'].apply(lambda x:', '.join(x))

#df_car['Entertainment & Communication'].head()#

#print(df_car.head())

model_view=setup(data=df_car,target='price',index=False)

compare_models()

dt=create_model('dt')

#tuned_dt_model=tune_model(dt)

evaluate_model(dt)

predictions=predict_model(dt,data=df_car)

final_dt_model=finalize_model(dt)

save_model(final_dt_model,'dt')

